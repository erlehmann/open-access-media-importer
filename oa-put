#!/usr/bin/env python
# -*- coding: utf-8 -*-

from helpers.cli import ArgumentParser, add_force_upload_option
parser = ArgumentParser(choices=[
        'upload-media'
])
parser = add_force_upload_option(parser)
args = parser.parse_args()

from helpers.cli import init_logging
logging = init_logging(args.verbose)

from os import path
from time import sleep

from helpers import config, efetch, filename_from_url, mediawiki, template
from model import session, set_source, Article, Journal, SupplementaryMaterial


def upload_material(material):
    """Uploads a single supplementary material to Mediawiki."""
    media_refined_directory = config.get_media_refined_source_path(source)
    filename = filename_from_url(material.url) + '.ogg'
    media_refined_path = path.join(media_refined_directory, filename)

    article_doi=material.article.doi
    article_pmid=efetch.get_pmid_from_doi(article_doi)
    article_pmcid=efetch.get_pmcid_from_doi(article_doi)

    categories = [category.name for category in material.article.categories]
    if article_pmid is not None:
        categories += efetch.get_categories_from_pmid(article_pmid)

    wiki_filename = template.make_wiki_filename(
        material.url,
        material.mimetype,
        material.article.title
        )
    page_template = template.make_wiki_page(
        article_doi=article_doi,
        article_pmid=article_pmid,
        article_pmcid=article_pmcid,
        authors=material.article.contrib_authors,
        article_title=material.article.title,
        journal_title=material.article.journal.title,
        article_year=material.article.year,
        article_month=material.article.month,
        article_day=material.article.day,
        article_url=material.article.url,
        license_url=material.article.license_url,
        label=material.label,
        caption=material.caption,
        title=material.title,
        categories=categories,
        mimetype=material.mimetype,
        material_url=material.url)

    mediawiki.upload(media_refined_path, wiki_filename, page_template)

    logging.info("“%s” uploaded to <%s>." % (
        media_refined_path.encode('utf-8'),
        config.api_url.encode('utf-8')
    ))

    material.uploaded = True
    session.commit()


def upload_media(source):
    """Upload converted media files to Mediawiki."""
    source_module = set_source(args.target)
    if args.force_upload == True:
        logging.debug('Uploading converted materials.')
        materials = SupplementaryMaterial.query.filter_by(
            converted=True,
            ).all()
    else:
        logging.debug('Uploading converted materials not uploaded.')
        materials = SupplementaryMaterial.query.filter_by(
            converted=True,
            uploaded=False,
            ).all()
    for material in materials:
        if (path.getsize(media_refined_path) == 0):
            material.converted=False
            continue

        if not mediawiki.is_uploaded(material):
            upload_material(material)
            sleep(10)  # 6 uploads per minute
        else:
            logging.warning("Skipping “%s”, already exists at %s." % (
                    media_refined_path.encode('utf-8'),
                    mediawiki.get_wiki_name()
                    ))
            material.uploaded=True
            continue


if args.action == 'upload-media':
    upload_media(args.target)
